# -*- coding: utf-8 -*-
"""Flight Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14WrquYbq-ONtI2ouj7AvZvqJpI7QMHfk

# Importing The data and preprocessing
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_excel('/content/drive/MyDrive/Dataset/Dataset.xlsx')
data.head()

data.info()

"""There are 9 features and 1 target variable"""

#checking for null values if any
data.isnull().sum()

"""These empty values are quite low so dropping them"""

data.dropna(inplace = True)

"""Dropping duplicates rows if any"""

data.drop_duplicates(inplace=True)

"""Visualization

Converting the date and times
"""

data["Journey_day"] = pd.to_datetime(data.Date_of_Journey, format="%d/%m/%Y").dt.day

data["Journey_month"] = pd.to_datetime(data["Date_of_Journey"], format = "%d/%m/%Y").dt.month

data.head()

#DAte 0f journey is now of no use so dropping it
data.drop(["Date_of_Journey"], axis = 1, inplace = True)

#converting the dep time into hours and minutes
data['Dep_hour']=pd.to_datetime(data["Dep_Time"]).dt.hour
#extracting the minutes
data['Dep_min']=pd.to_datetime(data["Dep_Time"]).dt.minute

#Now we can drop the date time and it is not of use
data.drop(["Dep_Time"], axis = 1, inplace = True)

data.head()

# Arrival time is when the plane pulls up to the gate.
# Similar to Date_of_Journey we can extract values from Arrival_Time

# Extracting Hours
data["Arrival_hour"] = pd.to_datetime(data.Arrival_Time).dt.hour

# Extracting Minutes
data["Arrival_min"] = pd.to_datetime(data.Arrival_Time).dt.minute

# Now we can drop Arrival_Time as it is of no use
data.drop(["Arrival_Time"], axis = 1, inplace = True)

data.head()

# Assigning and converting Duration column into list
duration = list(data["Duration"])

#taking the durations
for i in range(len(duration)):
    if len(duration[i].split()) != 2:
        if "h" in duration[i]:
            duration[i] = duration[i].strip() + " 0m"
        else:
            duration[i] = "0h " + duration[i]

duration_hours = []
duration_mins = []
for i in range(len(duration)):
    duration_hours.append(int(duration[i].split(sep = "h")[0]))
    duration_mins.append(int(duration[i].split(sep = "m")[0].split()[-1]))

data["Duration_hours"] = duration_hours
data["Duration_mins"] = duration_mins

data.drop(["Duration"], axis = 1, inplace = True)

data.head()

"""# Handling the categorical data"""

data[["Source"]].value_counts()

# Plotting Violin plot for Price vs Source
sns.catplot(y = "Price", x = "Source", data = data.sort_values("Price", ascending = False), kind="violin", height = 4, aspect = 3)
plt.show()

# Plotting Price vs Airline plot
sns.catplot(y = "Price", x = "Airline", data = data.sort_values("Price", ascending = False), kind="boxen", height = 8, aspect = 3)
plt.show()

"""Airline is a Nominal categorical data as we can't assign them any order"""

Airline = pd.get_dummies(data[["Airline"]], drop_first= True)
Airline.head()

"""Source is a Nominal categorical data as we can't assign them any order"""

Destination = pd.get_dummies(data[["Destination"]], drop_first = True)
Destination.head()

Source = pd.get_dummies(data[["Source"]], drop_first= True)

Source.head()

data.head()

"""Source is a Nominal categorical data as we can't assign them any order"""

# Additional_Info contains almost 80% no_info
# Route and Total_Stops are related to each other

data.drop(["Route", "Additional_Info"],axis = 1,inplace = True)

data.replace({"non-stop": 0, "1 stop": 1, "2 stops": 2, "3 stops": 3, "4 stops": 4},inplace = True)

#Now adding encoded columns to the dataframe
data_encoded = pd.concat([data, Airline, Source, Destination], axis = 1)

data_encoded.drop(["Airline", "Source", "Destination"], axis = 1, inplace = True)

data_encoded.head()

"""There are 33 columns total so training will take much time so selecting some features"""

X = data_encoded.loc[:, ['Total_Stops', 'Journey_day', 'Journey_month', 'Dep_hour',
       'Dep_min', 'Arrival_hour', 'Arrival_min', 'Duration_hours',
       'Duration_mins', 'Airline_Air India', 'Airline_GoAir', 'Airline_IndiGo',
       'Airline_Jet Airways', 'Airline_Jet Airways Business',
       'Airline_Multiple carriers',
       'Airline_Multiple carriers Premium economy', 'Airline_SpiceJet',
       'Airline_Trujet', 'Airline_Vistara', 'Airline_Vistara Premium economy',
       'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai',
       'Destination_Cochin', 'Destination_Delhi', 'Destination_Hyderabad',
       'Destination_Kolkata', 'Destination_New Delhi']]
X.head()

"""# Implementing the model

## Decision Trees
"""

y = data_encoded.iloc[:, 1]
y.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

from sklearn.tree import DecisionTreeRegressor
dtr=DecisionTreeRegressor()
dtr.fit(X_train,y_train)

y_dtc_pred =dtr.predict(X_test)

sns.distplot(y_dtc_pred)
plt.show()

plt.scatter(y_test, y_dtc_pred, alpha = 0.5)
plt.xlabel("y_test")
plt.ylabel("y_pred")
plt.show()

from sklearn import metrics
metrics.r2_score(y_test, y_dtc_pred)

"""### HyperParameter Tuning"""

max_depth=[5,10,15,20]
ccp_alpha=[0.001,0.05,0.1]
max_features=[5,10,15,20]

decision_grid = {'max_depth':max_depth,
                 'ccp_alpha':ccp_alpha,
                 'max_features':max_features}

from sklearn.model_selection import RandomizedSearchCV

decision_random = RandomizedSearchCV(estimator = dtr, param_distributions = decision_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42)

decision_random.fit(X_train,y_train)

decision_random.best_params_

dtr_best=DecisionTreeRegressor(ccp_alpha= 0.1, max_depth= 15, max_features= 20)
dtr_best.fit(X_train,y_train)

y_dtr_prediction = dtr_best.predict(X_test)

metrics.r2_score(y_test, y_dtr_prediction)

"""## Random Forest"""

from sklearn.ensemble import RandomForestRegressor
reg_rf = RandomForestRegressor()
reg_rf.fit(X_train, y_train)

y_pred = reg_rf.predict(X_test)

reg_rf.score(X_train, y_train)

reg_rf.score(X_test,y_test)

sns.distplot(y_test-y_pred)
plt.show()

plt.scatter(y_test, y_pred, alpha = 0.5)
plt.xlabel("y_test")
plt.ylabel("y_pred")
plt.show()

from sklearn import metrics

print('Mean Absolute ERROR:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Square Error:', metrics.mean_squared_error(y_test, y_pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

2090.5509/(max(y)-min(y))

metrics.r2_score(y_test, y_pred)

"""### HyperParamter Tuning"""

from sklearn.model_selection import RandomizedSearchCV

n_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]
# Number of features to consider at every split
max_features = ['auto', 'sqrt']
# Maximum number of levels in tree
max_depth = [int(x) for x in np.linspace(5, 30, num = 6)]
# Minimum number of samples required to split a node
min_samples_split = [2, 5, 10, 15, 100]
# Minimum number of samples required at each leaf node
min_samples_leaf = [1, 2, 5, 10]

random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf}

rf_random = RandomizedSearchCV(estimator = reg_rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42)

rf_random.fit(X_train,y_train)

rf_random.best_params_

rf_best=RandomForestRegressor(max_depth= 20,
 max_features= 'auto',
 min_samples_leaf= 1,
 min_samples_split= 15,
 n_estimators= 700)

rf_best.fit(X_train,y_train)

y_prediction = rf_best.predict(X_test)

metrics.r2_score(y_test, y_prediction)

"""## XGboost"""

import xgboost as xg

xgb_r = xg.XGBRegressor(n_estimators = 10, seed = 123)

xgb_r.fit(X_train, y_train)

pred_xgb=xgb_r.predict(X_test)

sns.distplot(y_test-pred_xgb)
plt.show()

plt.scatter(y_test, pred_xgb, alpha = 0.5)
plt.xlabel("y_test")
plt.ylabel("y_pred")
plt.show()

print('MAE:', metrics.mean_absolute_error(y_test, y_pred))
print('MSE:', metrics.mean_squared_error(y_test, y_pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

"""### HyperParameter Tuning"""

max_depth=[5,10,15,20]
n_estimators=[100,500,1000]
n_jobs=[2,5,8,10]
learning_rate=[0.005,0.01,0.05,0.1,1]

XGB_grid = {'max_depth': max_depth,
               'n_estimators': n_estimators,
               'max_depth': max_depth,
               'learning_rate':learning_rate}

XGB_random = RandomizedSearchCV(estimator = xgb_r, param_distributions = XGB_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42)

XGB_random.fit(X_train,y_train)

XGB_random.best_params_

xgb_best=xg.XGBRegressor(learning_rate= 0.005, max_depth= 10, n_estimators= 1000,state=42,objectvie='reg:squarederror')

xgb_best.fit(X_train,y_train)

y_prediction_xgb = xgb_best.predict(X_test)

metrics.r2_score(y_test, y_prediction_xgb)

"""## Linear Regression"""

from sklearn.linear_model import LinearRegression

lr=LinearRegression()
lr.fit(X_train,y_train)

lr_pred=lr.predict(X_test)

sns.distplot(lr_pred)
plt.show()

plt.scatter(y_test,lr_pred, alpha = 0.5)
plt.xlabel("y_test")
plt.ylabel("y_pred")
plt.show()

metrics.r2_score(y_test, lr_pred)